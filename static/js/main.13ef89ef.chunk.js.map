{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["element","icon","faClock","App","useState","timer","setTimer","isActive","setIsActive","isPaused","setIsPaused","increment","useRef","className","getSeconds","slice","minutes","Math","floor","getMinutes","getHours","formatTime","onClick","clearInterval","current","setInterval","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAMMA,G,MAAU,cAAC,IAAD,CAAiBC,KAAMC,OAkExBC,EAhEH,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,oBAAS,GAFzB,mBAETG,EAFS,KAECC,EAFD,OAGgBJ,oBAAS,GAHzB,mBAGTK,EAHS,KAGCC,EAHD,KAIVC,EAAYC,iBAAO,MAsCzB,OACE,sBAAKC,UAAU,MAAf,UACE,qDAAwBb,KACxB,sBAAKa,UAAU,iBAAf,UACE,4BAba,WACjB,IAAMC,EAAa,WAAIT,EAAQ,IAAKU,OAAO,GACrCC,EAAO,UAAMC,KAAKC,MAAMb,EAAQ,KAChCc,EAAa,WAAIH,EAAU,IAAKD,OAAO,GACvCK,EAAW,WAAIH,KAAKC,MAAMb,EAAQ,OAAQU,OAAO,GAEvD,MAAM,GAAN,OAAUK,EAAV,cAAwBD,EAAxB,cAAwCL,GAOhCO,KACJ,sBAAKR,UAAU,UAAf,UACIN,GAAaE,EAEXA,EACF,wBAAQa,QArCE,WAClBC,cAAcZ,EAAUa,SACxBd,GAAY,IAmCJ,mBAEA,wBAAQY,QAlCG,WACnBZ,GAAY,GACZC,EAAUa,QAAUC,aAAY,WAC9BnB,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MA8BK,oBAJA,wBAAQiB,QA3CE,WAClBd,GAAY,GACZE,GAAY,GACZC,EAAUa,QAAUC,aAAY,WAC9BnB,GAAS,SAACD,GAAD,OAAWA,EAAQ,OAC3B,MAsCK,mBAMF,wBAAQiB,QA7BI,WAClBC,cAAcZ,EAAUa,SACxBhB,GAAY,GACZE,GAAY,GACZJ,EAAS,IAyB2BoB,UAAWnB,EAAzC,6BCnDKoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1Bb,M","file":"static/js/main.13ef89ef.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-regular-svg-icons\";\n\nimport \"./App.css\";\n\nconst element = <FontAwesomeIcon icon={faClock} />;\n\nconst App = () => {\n  const [timer, setTimer] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const increment = useRef(null);\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handlePause = () => {\n    clearInterval(increment.current);\n    setIsPaused(false);\n  };\n\n  const handleResume = () => {\n    setIsPaused(true);\n    increment.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handleReset = () => {\n    clearInterval(increment.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTimer(0);\n  };\n\n  const formatTime = () => {\n    const getSeconds = `0${timer % 60}`.slice(-2);\n    const minutes = `${Math.floor(timer / 60)}`;\n    const getMinutes = `0${minutes % 60}`.slice(-2);\n    const getHours = `0${Math.floor(timer / 3600)}`.slice(-2);\n\n    return `${getHours} : ${getMinutes} : ${getSeconds}`;\n  };\n\n  return (\n    <div className=\"app\">\n      <h3>KillShot Stopwatch {element}</h3>\n      <div className=\"stopwatch-card\">\n        <p>{formatTime()}</p>\n        <div className=\"buttons\">\n          {!isActive && !isPaused ? (\n            <button onClick={handleStart}>Start</button>\n          ) : isPaused ? (\n            <button onClick={handlePause}>Pause</button>\n          ) : (\n            <button onClick={handleResume}>Resume</button>\n          )}\n          <button onClick={handleReset} disabled={!isActive}>\n            Reset\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// serviceWorker.register();\nreportWebVitals();\n"],"sourceRoot":""}